<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
    xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<util:properties id="config" location="classpath:config.properties"/>
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	  <!-- json -->
	<beans:bean id="jsonView" class="net.sf.json.spring.web.servlet.view.JsonView">
		<beans:property name="contentType" value="application/json;charset=UTF-8"></beans:property>
	</beans:bean>
	<beans:bean id="beanNameResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver" p:order="0"/>
	
	<context:component-scan base-package="com.goodbyenote.bapdosaptlweb" />
	
	<mvc:interceptors> 

		<mvc:interceptor>
		    <mvc:mapping path="/**/*.do" />
   			<beans:bean class="com.goodbyenote.bapdosaptlweb.common.interceptor.AccessLogInterceptor" />
		</mvc:interceptor>
    
		<mvc:interceptor>
			<mvc:mapping path="/admin/**/*.do" />
   			<beans:bean class="com.goodbyenote.bapdosaptlweb.common.interceptor.AdminInterceptor" />
		</mvc:interceptor>
<!-- 
		<mvc:interceptor>
			<mvc:mapping path="/mypage/**/*.do" />
			<mvc:mapping path="/register/**/*.do" />
   			<beans:bean class="com.goodbyenote.bapdosaptlweb.common.interceptor.MypageInterceptor" />
		</mvc:interceptor>
	-->
			
	</mvc:interceptors>	
	
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	</beans:bean> 
	
    <!-- SET default mail properties -->
    <beans:bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <beans:property name="host" value="localhost" />
        <beans:property name="port" value="25" />
    </beans:bean>	
    
    <!-- You can have some pre-configured messagess also which are ready to send -->
    <beans:bean id="preConfiguredMessage" class="org.springframework.mail.SimpleMailMessage">
        <beans:property name="to" value="ray7.cho@gmail.com"></beans:property>
        <beans:property name="from" value="ray7.cho@gmail.com"></beans:property>
        <beans:property name="subject" value="FATAL - Application crash. Save your job !!"/>
    </beans:bean>    
	
	
</beans:beans>
